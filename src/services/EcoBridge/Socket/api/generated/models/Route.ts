/* tslint:disable */
/* eslint-disable */
/**
 * Movr Aggregator API
 * The Movr Aggregator API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface Route
 */
export interface Route {
  /**
   * Unique id for each route.
   * @type {string}
   * @memberof Route
   */
  routeId: string
  /**
   * Sending token amount.
   * @type {string}
   * @memberof Route
   */
  fromAmount: string
  /**
   *
   * @type {object}
   * @memberof Route
   */
  chainGasBalances: object
  /**
   * Approximate receiving token amount.
   * @type {string}
   * @memberof Route
   */
  toAmount: string
  /**
   * Array of bridges used in the route
   * @type {Array<string>}
   * @memberof Route
   */
  usedBridgeNames: Array<RouteUsedBridgeNamesEnum>
  /**
   * Total number of transactions for the route.
   * @type {number}
   * @memberof Route
   */
  totalUserTx: number
  /**
   * Combined USD gas fees for all transactions in the route.
   * @type {number}
   * @memberof Route
   */
  totalGasFeesInUsd: number
  /**
   * Address of user making the transactions.
   * @type {string}
   * @memberof Route
   */
  sender: string
  /**
   * Array of user transactions.
   * @type {Array<object>}
   * @memberof Route
   */
  userTxs: Array<object>
  /**
   * Estimate of total time in seconds, excluding the transaction time.
   * @type {number}
   * @memberof Route
   */
  serviceTime: number
}

/**
 * @export
 * @enum {string}
 */
export enum RouteUsedBridgeNamesEnum {
  PolygonBridge = 'polygon-bridge',
  Hop = 'hop',
  AnyswapRouterV4 = 'anyswap-router-v4',
  Hyphen = 'hyphen',
  ArbitrumBridge = 'arbitrum-bridge',
  Connext = 'connext',
}

export function RouteFromJSON(json: any): Route {
  return RouteFromJSONTyped(json, false)
}

export function RouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Route {
  if (json === undefined || json === null) {
    return json
  }
  return {
    routeId: json['routeId'],
    fromAmount: json['fromAmount'],
    chainGasBalances: json['chainGasBalances'],
    toAmount: json['toAmount'],
    usedBridgeNames: json['usedBridgeNames'],
    totalUserTx: json['totalUserTx'],
    totalGasFeesInUsd: json['totalGasFeesInUsd'],
    sender: json['sender'],
    userTxs: json['userTxs'],
    serviceTime: json['serviceTime'],
  }
}

export function RouteToJSON(value?: Route | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    routeId: value.routeId,
    fromAmount: value.fromAmount,
    chainGasBalances: value.chainGasBalances,
    toAmount: value.toAmount,
    usedBridgeNames: value.usedBridgeNames,
    totalUserTx: value.totalUserTx,
    totalGasFeesInUsd: value.totalGasFeesInUsd,
    sender: value.sender,
    userTxs: value.userTxs,
    serviceTime: value.serviceTime,
  }
}
