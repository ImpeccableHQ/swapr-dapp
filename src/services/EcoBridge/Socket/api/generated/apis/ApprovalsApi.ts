/* tslint:disable */
/* eslint-disable */
/**
 * Movr Aggregator API
 * The Movr Aggregator API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  ApprovalOutputDTO,
  ApprovalOutputDTOFromJSON,
  ApprovalOutputDTOToJSON,
  ApprovalTxOutputDTO,
  ApprovalTxOutputDTOFromJSON,
  ApprovalTxOutputDTOToJSON,
} from '../models'

export interface ApproveControllerFetchApprovalsRequest {
  chainID: string
  owner: string
  allowanceTarget: string
  tokenAddress: string
  aPIKEY?: string
}

export interface ApproveControllerFetchApprovalsCalldataRequest {
  chainID: string
  owner: string
  allowanceTarget: string
  tokenAddress: string
  amount: string
  aPIKEY?: string
}

/**
 *
 */
export class ApprovalsApi extends runtime.BaseAPI {
  /**
   */
  async approveControllerFetchApprovalsRaw(
    requestParameters: ApproveControllerFetchApprovalsRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<ApprovalOutputDTO>> {
    if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
      throw new runtime.RequiredError(
        'chainID',
        'Required parameter requestParameters.chainID was null or undefined when calling approveControllerFetchApprovals.'
      )
    }

    if (requestParameters.owner === null || requestParameters.owner === undefined) {
      throw new runtime.RequiredError(
        'owner',
        'Required parameter requestParameters.owner was null or undefined when calling approveControllerFetchApprovals.'
      )
    }

    if (requestParameters.allowanceTarget === null || requestParameters.allowanceTarget === undefined) {
      throw new runtime.RequiredError(
        'allowanceTarget',
        'Required parameter requestParameters.allowanceTarget was null or undefined when calling approveControllerFetchApprovals.'
      )
    }

    if (requestParameters.tokenAddress === null || requestParameters.tokenAddress === undefined) {
      throw new runtime.RequiredError(
        'tokenAddress',
        'Required parameter requestParameters.tokenAddress was null or undefined when calling approveControllerFetchApprovals.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.chainID !== undefined) {
      queryParameters['chainID'] = requestParameters.chainID
    }

    if (requestParameters.owner !== undefined) {
      queryParameters['owner'] = requestParameters.owner
    }

    if (requestParameters.allowanceTarget !== undefined) {
      queryParameters['allowanceTarget'] = requestParameters.allowanceTarget
    }

    if (requestParameters.tokenAddress !== undefined) {
      queryParameters['tokenAddress'] = requestParameters.tokenAddress
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.aPIKEY !== undefined && requestParameters.aPIKEY !== null) {
      headerParameters['API-KEY'] = String(requestParameters.aPIKEY)
    }

    const response = await this.request(
      {
        path: `/v2/approval/check-allowance`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue => ApprovalOutputDTOFromJSON(jsonValue))
  }

  /**
   */
  async approveControllerFetchApprovals(
    requestParameters: ApproveControllerFetchApprovalsRequest,
    initOverrides?: RequestInit
  ): Promise<ApprovalOutputDTO> {
    const response = await this.approveControllerFetchApprovalsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async approveControllerFetchApprovalsCalldataRaw(
    requestParameters: ApproveControllerFetchApprovalsCalldataRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<ApprovalTxOutputDTO>> {
    if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
      throw new runtime.RequiredError(
        'chainID',
        'Required parameter requestParameters.chainID was null or undefined when calling approveControllerFetchApprovalsCalldata.'
      )
    }

    if (requestParameters.owner === null || requestParameters.owner === undefined) {
      throw new runtime.RequiredError(
        'owner',
        'Required parameter requestParameters.owner was null or undefined when calling approveControllerFetchApprovalsCalldata.'
      )
    }

    if (requestParameters.allowanceTarget === null || requestParameters.allowanceTarget === undefined) {
      throw new runtime.RequiredError(
        'allowanceTarget',
        'Required parameter requestParameters.allowanceTarget was null or undefined when calling approveControllerFetchApprovalsCalldata.'
      )
    }

    if (requestParameters.tokenAddress === null || requestParameters.tokenAddress === undefined) {
      throw new runtime.RequiredError(
        'tokenAddress',
        'Required parameter requestParameters.tokenAddress was null or undefined when calling approveControllerFetchApprovalsCalldata.'
      )
    }

    if (requestParameters.amount === null || requestParameters.amount === undefined) {
      throw new runtime.RequiredError(
        'amount',
        'Required parameter requestParameters.amount was null or undefined when calling approveControllerFetchApprovalsCalldata.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.chainID !== undefined) {
      queryParameters['chainID'] = requestParameters.chainID
    }

    if (requestParameters.owner !== undefined) {
      queryParameters['owner'] = requestParameters.owner
    }

    if (requestParameters.allowanceTarget !== undefined) {
      queryParameters['allowanceTarget'] = requestParameters.allowanceTarget
    }

    if (requestParameters.tokenAddress !== undefined) {
      queryParameters['tokenAddress'] = requestParameters.tokenAddress
    }

    if (requestParameters.amount !== undefined) {
      queryParameters['amount'] = requestParameters.amount
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.aPIKEY !== undefined && requestParameters.aPIKEY !== null) {
      headerParameters['API-KEY'] = String(requestParameters.aPIKEY)
    }

    const response = await this.request(
      {
        path: `/v2/approval/build-tx`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue => ApprovalTxOutputDTOFromJSON(jsonValue))
  }

  /**
   */
  async approveControllerFetchApprovalsCalldata(
    requestParameters: ApproveControllerFetchApprovalsCalldataRequest,
    initOverrides?: RequestInit
  ): Promise<ApprovalTxOutputDTO> {
    const response = await this.approveControllerFetchApprovalsCalldataRaw(requestParameters, initOverrides)
    return await response.value()
  }
}
